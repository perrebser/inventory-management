---
openapi: 3.0.0
info:
  title: Product API
  description: API for managing products
  version: 1.0.0
servers:
  - url: http://localhost:8082/perrebser
tags:
  - name: Products
    description: Products API.
  - name: Category
    description: Category API.
paths:
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      operationId: getAllProducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
    post:
      tags:
        - Products
      summary: Create a new product
      operationId: createProduct
      requestBody:
        description: The product to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              code: "PHG-23"
              name: "Updated Product"
              description: "An updated product"
              quantity: 15
              price: 29.99
              category_id: 2
              provider_id: 2
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
  /api/products/{productCode}:
    get:
      tags:
        - Products
      summary: Get Product by code
      operationId: getProductByCode
      parameters:
        - $ref: '#/components/parameters/productCode'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ProductResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
    put:
      tags:
        - Products
      summary: Update a product
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/productCode'
      requestBody:
        description: The product to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              code: "PHG-23"
              name: "Updated Product"
              description: "An updated product"
              quantity: 15
              price: 29.99
              category_id: 2
              provider_id: 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
    delete:
        tags:
          - Products
        summary: Delete a product
        operationId: deleteProduct
        parameters:
          - $ref: '#/components/parameters/productCode'
        responses:
            "200":
              description: Succesful Operation
            "400":
              description: Bad Request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/errorObject'
                  example:
                    status: 400
                    description: Bad Request
                    message: Invalid Request.


  /api/category:
    post:
      tags:
      - Category
      summary: Add new categories
      description: Add new categories
      operationId: addCategories
      requestBody:
        description: Categories to be Added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryList"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryList"
        "400":
          $ref: "#/components/responses/400BadRequestError"
        "401":
          $ref: "#/components/responses/401UnauthorizedError"
        "403":
          $ref: "#/components/responses/403ForbiddenError"
        "404":
          $ref: "#/components/responses/404NotFoundError"
        "500":
          $ref: "#/components/responses/500InternalServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailableError"
        "504":
          $ref: "#/components/responses/504GatewayTimeOut"

  /api/category/{code}:
    delete:
      tags:
      - Category
      summary: Delete category
      description: Delete category by code
      operationId: deleteCategory
      parameters:
        - $ref: "#/components/parameters/categoryCode"
      responses:
        "200":
          description: Successful operation
        "400":
          $ref: "#/components/responses/400BadRequestError"
        "401":
          $ref: "#/components/responses/401UnauthorizedError"
        "403":
          $ref: "#/components/responses/403ForbiddenError"
        "404":
          $ref: "#/components/responses/404NotFoundError"
        "500":
          $ref: "#/components/responses/500InternalServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailableError"
        "504":
          $ref: "#/components/responses/504GatewayTimeOut"
    put: 
      tags:
        - Category
      summary: Update an existing category
      description: Update category by code
      operationId: updateCategory
      parameters:
          - $ref: "#/components/parameters/categoryCode"
      requestBody:
        description: Category
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
            $ref: "#/components/responses/400BadRequestError"
        "401":
            $ref: "#/components/responses/401UnauthorizedError"
        "403":
            $ref: "#/components/responses/403ForbiddenError"
        "404":
            $ref: "#/components/responses/404NotFoundError"
        "500":
            $ref: "#/components/responses/500InternalServerError"
        "503":
           $ref: "#/components/responses/503ServiceUnavailableError"
        "504":
            $ref: "#/components/responses/504GatewayTimeOut"
  /api/categories:
    get:
      tags:
        - Category
      summary: Get all categories
      description: Get all categories
      operationId: getCategories
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryList"
        "400":
          $ref: "#/components/responses/400BadRequestError"
        "401":
          $ref: "#/components/responses/401UnauthorizedError"
        "403":
          $ref: "#/components/responses/403ForbiddenError"
        "404":
          $ref: "#/components/responses/404NotFoundError"
        "500":
          $ref: "#/components/responses/500InternalServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailableError"
        "504":
          $ref: "#/components/responses/504GatewayTimeOut"
components:
  schemas:
    Product:
      required:
        - name
        - price
      type: object
      properties:
        code:
          type: string
          description: The unique identifier for the product
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: A description of the product
        quantity:
          type: integer
          description: The quantity of the product
        price:
          type: number
          description: The price of the product
        category_id:
          type: integer
          description: The ID of the category the product belongs to
        provider_id:
          type: integer
          description: The ID of the provider that supplies the product
    Category:
      required:
        - code
        - categoryName
      type: object
      properties:
        code:
          type: string
          description: The unique identifier for the category
          example: EPC
        categoryName:
          type: string
          description: The name of the category
          example: Electronics
    CategoryList:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Category"
    ProductResponse:
      type: object
      properties:
        code:
          type: string
          description: The unique identifier for the product
          example: 'IPH11P'
        name:
          type: string
          description: The name of the product
          example: 'Iphone 11 Pro'
        price:
          type: number
          description: The price of the product
          example: '1100'
        quantity:
          type: integer
          description: Stock of the product
          example: '234'
    errorObject:
      title: errorObject
      type: object
      properties:
        status:
          maximum: 599
          minimum: 100
          type: integer
          description: Status code of response
          format: int32
          example: 400
        message:
          maxLength: 100
          pattern: "^[A-Za-z0-9 .]"
          type: string
          description: Error message
          example: Bad Request
        description:
          maxLength: 100
          pattern: "^[A-Za-z0-9 .]"
          type: string
          description: Error description
          example: Bad Request
      additionalProperties: false
      description: Error details
  responses:
    400BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 400
            description: Bad Request
            message: Invalid Request.
    401UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 401
            description: Unauthorized
            message: Unauthorized Error.
    403ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 403
            description: Forbidden
            message: Forbidden Error.
    404NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 404
            description: NotFound
            message: Resouce not found.
    500InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 500
            description: InternalServer
            message: Internal Server Error.
    503ServiceUnavailableError:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 503
            description: ServiceUnavailable
            message: Service Unavailable.
    504GatewayTimeOut:
      description: Gateway Timeout
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorObject"
          example:
            status: 504
            description: GatewayTimeOut
            message: Gateway Time Out.
  parameters:
    productCode:
      name: productCode
      in: path
      description: Code of the product
      required: true
      style: simple
      explode: false
      schema:
        minimum: 6
        type: string
      example: GFR234
    categoryCode:
      name: categoryCode
      in: path
      description: Code of the category
      required: true
      schema:
        type: string
      example: ALV

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic