---
openapi: 3.0.0
info:
  title: Product API
  description: API for managing products
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DEVPERREBSER_1/InventoryAPI/1.0.0
  - url: http://localhost:8082/
paths:
  /products:
    get:
      tags:
        - products
      summary: Get all products
      operationId: getAllProducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
    post:
      tags:
        - products
      summary: Create a new product
      operationId: createProduct
      requestBody:
        description: The product to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: "New Product"
              description: "A new product"
              quantity: 10
              price: 19.99
              category_id: 1
              provider_id: 1
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
  /products/{productCode}:
    get:
      tags:
        - products
      summary: Get Product by code
      operationId: getProductByCode
      parameters:
        - $ref: '#/components/parameters/productCode'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ProductResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
    put:
      tags:
        - products
      summary: Update a product
      operationId: updateProduct
      parameters:
        - $ref: '#/components/parameters/productCode'
      requestBody:
        description: The product to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: "Updated Product"
              description: "An updated product"
              quantity: 15
              price: 29.99
              category_id: 2
              provider_id: 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.
    delete:
      tags:
        - products
      summary: delete a product
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/productCode'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorObject'
              example:
                status: 400
                description: Bad Request
                message: Invalid Request.




components:
  schemas:
    Product:
      required:
        - name
        - price
      type: object
      properties:
        id:
          type: integer
          description: The internal id of the product
        code:
          type: string
          description: The unique identifier for the product
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: A description of the product
        quantity:
          type: integer
          description: The quantity of the product
        price:
          type: number
          description: The price of the product
        category_id:
          type: integer
          description: The ID of the category the product belongs to
        provider_id:
          type: integer
          description: The ID of the provider that supplies the product
    Category:
      required:
        - categoryName
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the category
        categoryName:
          type: string
          description: The name of the category
    ProductResponse:
      type: object
      properties:
        code:
          type: string
          description: The unique identifier for the product
          example: 'IPH11P'
        name:
          type: string
          description: The name of the product
          example: 'Iphone 11 Pro'
        price:
          type: number
          description: The price of the product
          example: '1100'
    errorObject:
      title: errorObject
      type: object
      properties:
        status:
          maximum: 599
          minimum: 100
          type: integer
          description: Status code of response
          format: int32
          example: 400
        message:
          maxLength: 100
          pattern: "^[A-Za-z0-9 .]"
          type: string
          description: Error message
          example: Bad Request
        description:
          maxLength: 100
          pattern: "^[A-Za-z0-9 .]"
          type: string
          description: Error description
          example: Bad Request
      additionalProperties: false
      description: Error details
  responses:
    "400BadRequestError":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorObject'
          example:
            status: 400
            description: Bad Request
            message: Invalid Request.
    "404NotFoundError":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorObject'
          example:
            status: 404
            description: NotFound
            message: Resouce not found.
  parameters:
    productCode:
      name: productCode
      in: path
      description: Code of the product
      required: true
      style: simple
      explode: false
      schema:
        minimum: 6
        type: string
      example: GFR234
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic